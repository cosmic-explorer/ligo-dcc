#! /usr/bin/env perl
#
#        Name: $RCSfile: MeetingModify,v $
# Description: Modify sessions of meeting the shell of a meeting. Calls itself
#    Revision: $Revision: 1.43.4.10 $
#    Modified: $Author: vondo $ on $Date: 2007/08/10 14:34:34 $
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2007 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use DBI;
use Time::Local;

require "DocDBGlobals.pm";
require "Messages.pm";

require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "FormElements.pm";
require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";

require "MeetingHTML.pm";
require "SecurityHTML.pm";
require "MeetingSQL.pm";
require "MeetingSecuritySQL.pm";
require "MeetingSecurityUtilities.pm";
require "TopicSQL.pm";
require "WebUtilities.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;
$query -> delete_all(); # Stop program from caching variable from script to script

my $Mode               = $params{mode};
my $NoSessions         = $params{nosessions};

my $EventGroupID       = $params{eventgroups};
my $Short              = $params{shortdesc};
my $Long               = $params{long};

my $ConferenceID       = $params{conferenceid};
my $OffsetDays         = $params{offsetdays};

my $StartYear          = $params{startyear};
my $StartMonth         = $params{startmonth};
my $StartDay           = $params{startday};
my $EndYear            = $params{endyear};
my $EndMonth           = $params{endmonth};
my $EndDay             = $params{endday};
my $MeetPreamble       = $params{meetpreamble};
my $MeetEpilogue       = $params{meetepilogue};
my $Location           = $params{location};
my $AltLocation        = $params{altlocation};
my $URL                = $params{url};
my $ShowAllTalks       = $params{meetshowall};

my @MeetingViewGroupIDs   = split /\0/,$params{meetingviewgroups};
my @MeetingModifyGroupIDs = split /\0/,$params{meetingmodifygroups};
my @MeetingTopicIDs       = split /\0/,$params{topics};
my @MeetingModeratorIDs   = split /\0/,$params{moderators};

my @SessionYears         = split /\0/,$params{sessionyear};
my @SessionMonths        = split /\0/,$params{sessionmonth};
my @SessionDays          = split /\0/,$params{sessionday};
my @SessionHours         = split /\0/,$params{sessiontime};
my @SessionOrders        = split /\0/,$params{sessionorder};
my @RawSessionSeparators = split /\0/,$params{sessionseparator};
my @SessionLocations     = split /\0/,$params{sessionlocation};
my @SessionAltLocations  = split /\0/,$params{sessionaltlocation};
my @SessionTitles        = split /\0/,$params{sessiontitle};
my @SessionDescriptions  = split /\0/,$params{sessiondescription};
my @MeetingOrderIDs      = split /\0/,$params{meetingorderid};
my @SessionDeletes       = split /\0/,$params{sessiondelete};
my @SessionShowAlls      = split /\0/,$params{sessionshowall};

my $StartDate = "$StartYear-$ReverseAbrvMonth{$StartMonth}-$StartDay";
my $EndDate   = "$EndYear-$ReverseAbrvMonth{$EndMonth}-$EndDay";

my ($StartTime,$EndTime);

if ($StartDay && $StartMonth && $StartYear) {
  $StartTime = timelocal(0,0,0,$StartDay,$ReverseAbrvMonth{$StartMonth}-1,$StartYear);
}

if ($EndDay && $EndMonth && $EndYear) {
  $EndTime   = timelocal(0,0,0,$EndDay,$ReverseAbrvMonth{$EndMonth}-1,$EndYear);
}

if ($ShowAllTalks) {$ShowAllTalks = 1;}

if ($Mode eq "copy") {
  $SetMode = "create"
} elsif ($ConferenceID || $Mode) {
  $SetMode = "modify";
} else {
  $SetMode = "create";
}

unless ($Long) {
  $Long = $Short;
}

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}

my %RequiredEntries = ();
   $RequiredEntries{StartDate}        = $TRUE;
   $RequiredEntries{EndDate}          = $TRUE;
   $RequiredEntries{LongDescription}  = $FALSE; # Can get from ShortDescription
   $RequiredEntries{ShortDescription} = $TRUE;
   $RequiredEntries{EventGroup}       = $TRUE;

print $query -> header( -charset => $HTTP_ENCODING );
my $Title = 'Modify an Event';
if ($SetMode eq "create") {
  $Title = "Create a New Event";
}
DocDBHeader($Title,"",-scripts => ["serverstatus", "PopUps", "jQuery/jquery-1.8", "jQuery/jquery-ui", "Autocompleters"]);

EndPage(@ErrorStack);
print qq(
    <link rel=\"stylesheet\" href=\"/Static/css/jquery-ui.css\" type=\"text/css\">
    <link rel="stylesheet" href="/Static/css/Autocompleters.css">
);
AuthorJSList(1);

# Security checks

unless (&CanCreateMeeting()) {
  push @ErrorStack,$Msg_MeetNoCreate;
}
if ($ConferenceID && !CanModifyMeeting($ConferenceID)) {
  push @ErrorStack,$Msg_MeetNoModify;
}

# Checks on input parameters

if ($Mode eq "create" || $Mode eq "modify") {
  unless ($Short) {
    push @ErrorStack,$Msg_TopicNoShort;
  }
  if ($URL && !(&ValidURL($URL))) {
    push @ErrorStack,"The URL $URL is not valid.";
  }
  unless ($EventGroupID) {
    push @ErrorStack,"You must select a group for this event.";
  }
  unless ($EndTime   && ValidDate($EndDay,$ReverseAbrvMonth{$EndMonth},$EndYear)) {
    push @ErrorStack,"The event ending date is not valid.";
  }
  unless ($StartTime && ValidDate($StartDay,$ReverseAbrvMonth{$StartMonth},$StartYear)) {
    push @ErrorStack,"The event starting date is not valid.";
  }
  if ($StartTime > $EndTime) {
    push @ErrorStack,"The event starting date is after the ending date.";
  }
}

if ($Mode eq "modify") {
  FetchConferenceByConferenceID($ConferenceID);
  unless ($Conferences{$ConferenceID}{TimeStamp}) {
    push @ErrorStack,"No such event exists.";
  }
}

my @CheckYears  = @SessionYears ;
my @CheckMonths = @SessionMonths;
my @CheckDays   = @SessionDays  ;
my @CheckTitles = @SessionTitles;

# FIXME: Here we require Title set, elsewhere or Description. Error if no Title

foreach my $CheckTitle (@CheckTitles) { # Check session times
  my $Year  = shift @CheckYears ;
  my $Month = shift @CheckMonths;
  my $Day   = shift @CheckDays  ;
  if ($CheckTitle) {
    my $Time = timelocal(0,0,0,$Day,$ReverseAbrvMonth{$Month}-1,$Year);
    unless ($Time && ValidDate($Day,$ReverseAbrvMonth{$Month},$Year)) {
      push @ErrorStack,"The starting date for $CheckTitle is not valid.";
    }
    if ($Time > $EndTime) {
      push @ErrorStack,"The starting date for $CheckTitle is after the event ends.";
    }
    if ($Time < $StartTime) {
      push @ErrorStack,"The starting date for $CheckTitle is before the event starts.";
    }
  }
}

EndPage();

my $SessionsModified = 0;

if ($ConferenceID) {
  require "MeetingSQL.pm";
                            FetchConferenceByConferenceID($ConferenceID);
  my @SessionIDs          = FetchSessionsByConferenceID($ConferenceID);
  my @SessionSeparatorIDs = FetchSessionSeparatorsByConferenceID($ConferenceID);
  my @MeetingOrderIDs     = FetchMeetingOrdersByConferenceID($ConferenceID);
}

if ($Mode eq "create" || $Mode eq "modify") {
  if ($Mode eq "create") {
    $ConferenceID = InsertEvent({
        -eventgroupid     => $EventGroupID,         -location     => $Location,
        -altlocation      => $AltLocation,          -url          => $URL,
        -startdate        => $StartDate,            -enddate      => $EndDate,
        -preamble         => $MeetPreamble,         -epilogue     => $MeetEpilogue,
        -shortdescription => $Short,                -showalltalks => $ShowAllTalks,
        -longdescription  => $Long,
        -topicids         => \@MeetingTopicIDs,     -moderatorids   => \@MeetingModeratorIDs ,
        -viewgroupids     => \@MeetingViewGroupIDs, -modifygroupids => \@MeetingModifyGroupIDs, });
    push @ActionStack,"Created new event: $Short";
  } elsif ($Mode eq "modify") {
    UpdateEvent({
        -eventid          => $ConferenceID,         -eventgroupid    => $EventGroupID,
        -location         => $Location,             -altlocation     => $AltLocation,
        -url              => $URL,                  -startdate       => $StartDate,
        -enddate          => $EndDate,              -showalltalks    => $ShowAllTalks,
        -preamble         => $MeetPreamble,         -epilogue        => $MeetEpilogue,
        -shortdescription => $Short,                -longdescription => $Long,
        -topicids         => \@MeetingTopicIDs,     -moderatorids    => \@MeetingModeratorIDs,
        -viewgroupids     => \@MeetingViewGroupIDs, -modifygroupids  => \@MeetingModifyGroupIDs, });
    push @ActionStack,"Modified event: $Short";
  }

# Repack check boxes into hashes

  my %SessionSeparatorFlags = ();
  foreach my $RawSessionSeparator (@RawSessionSeparators) {
    $SessionSeparatorFlags{$RawSessionSeparator} = 1;
  }
  my %SessionDeleteFlags = ();
  foreach my $SessionDelete (@SessionDeletes) {
    $SessionDeleteFlags{$SessionDelete} = 1;
  }
  my %SessionShowAllFlags = ();
  foreach my $SessionShowAll (@SessionShowAlls) {
    $SessionShowAllFlags{$SessionShowAll} = 1;
    push @DebugStack,"Setting $SessionShowAll to true";
  }

# Re-sort session orders

  my %SessionOrders = ();
  {
    foreach my $SessionOrder (@SessionOrders) {
      $SessionOrders{$SessionOrder} = $SessionOrder;
    }
    my @OrderedOrders = sort numerically @SessionOrders;

    my $NewOrder = 1;
    foreach my $SessionOrder (@OrderedOrders) {
      $SessionOrders{$SessionOrder} = $NewOrder;
      ++$NewOrder;
    }
  }

# Loop over sessions and insert

  foreach my $SessionOrder (@SessionOrders) {
    my $SessionYear        = shift @SessionYears          ;
    my $SessionMonth       = shift @SessionMonths         ;
    my $SessionDay         = shift @SessionDays           ;
    my $SessionHour        = shift @SessionHours          ;
    my $SessionLocation    = shift @SessionLocations      ;
    my $SessionAltLocation = shift @SessionAltLocations   ;
    my $SessionTitle       = shift @SessionTitles         ;
    my $SessionDescription = shift @SessionDescriptions   ;
    my $MeetingOrderID     = shift @MeetingOrderIDs       ;
    my $SessionNewOrder    = $SessionOrders{$SessionOrder};
    my $SessionDate        = "$SessionYear-$ReverseAbrvMonth{$SessionMonth}-$SessionDay $SessionHour:00";

    my $SessionSeparatorID = 0;
    my $SessionID          = 0;

    my @TopicIDs     = split /\0/,$params{"sessiontopics-$MeetingOrderID"};
    my @ModeratorIDs = split /\0/,$params{"moderators-$MeetingOrderID"};

    # Key on MeetingOrderID to see if we are going to insert or update.
    if (grep /n/,$MeetingOrderID) {
      if ($SessionTitle || $SessionDescription) {
	if ($SessionSeparatorFlags{$MeetingOrderID}) {
          # Create a new separator
          my $SessionSeparatorInsert = $dbh -> prepare(
           "insert into SessionSeparator ".
           "(SessionSeparatorID, ConferenceID, StartTime, Location, Title, Description) ".
           "values (0,?,?,?,?,?)");
          $SessionSeparatorInsert -> execute($ConferenceID,$SessionDate,$SessionLocation,$SessionTitle,$SessionDescription);
          $SessionSeparatorID = $SessionSeparatorInsert -> {mysql_insertid}; # Works with MySQL only
          push @ActionStack,"Created break: $SessionTitle";
          ++$SessionsModified;
	} else {
          # Create a new session
          $SessionID = InsertSession({
              -eventid      => $ConferenceID,    -date        => $SessionDate,
              -title        => $SessionTitle,    -description => $SessionDescription,
              -location     => $SessionLocation, -altlocation => $SessionAltLocation,
              -moderatorids => \@ModeratorIDs,   -topicids    => \@TopicIDs,
              -showalltalks => $SessionShowAllFlags{$MeetingOrderID},
          });
          push @ActionStack,"Created session: $SessionTitle";
          ++$SessionsModified;
	}
        # Insert the order of the session or separator
        my $MeetingOrderInsert = $dbh -> prepare(
         "insert into MeetingOrder ".
         "(MeetingOrderID, SessionOrder, SessionID, SessionSeparatorID) ".
         "values (0,?,?,?)");
	$MeetingOrderInsert -> execute($SessionNewOrder,$SessionID,$SessionSeparatorID);
      }
    } else {
      $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};

      # Find out if this session is flagged for deletion

      if ($SessionDeleteFlags{$MeetingOrderID}) { # Delete session or separator
	if ($SessionSeparatorID) {
          DeleteSessionSeparator($SessionSeparatorID);
          push @ActionStack,"Deleted a break";
	} elsif ($SessionID) {
          DeleteSession($SessionID);
          push @ActionStack,"Deleted a session";
	}
      } elsif ($SessionTitle || $SessionDescription) {
	if ($SessionSeparatorID) {
          my $SessionSeparatorUpdate = $dbh -> prepare(
           "update SessionSeparator set ".
           "StartTime=?, Location=?, Title=?, Description=? ".
           "where SessionSeparatorID=?");
          $SessionSeparatorUpdate -> execute($SessionDate,$SessionLocation,$SessionTitle,$SessionDescription,$SessionSeparatorID);
          push @ActionStack,"Modified break: $SessionTitle";
          ++$SessionsModified;
	} else {
          push @DebugStack,"Reading $MeetingOrderID SF $SessionShowAllFlags{$MeetingOrderID}";
          UpdateSession({
              -sessionid    => $SessionID,       -date        => $SessionDate,
              -title        => $SessionTitle,    -description => $SessionDescription,
              -location     => $SessionLocation, -altlocation => $SessionAltLocation,
              -moderatorids => \@ModeratorIDs,   -topicids    => \@TopicIDs,
              -showalltalks => $SessionShowAllFlags{$MeetingOrderID},
          });
          push @ActionStack,"Modified session: $SessionTitle";
          ++$SessionsModified;
	}
        my $MeetingOrderUpdate = $dbh -> prepare(
         "update MeetingOrder set SessionOrder=? where MeetingOrderID=?");
	$MeetingOrderUpdate -> execute($SessionNewOrder,$MeetingOrderID);
      } else {
        push @WarnStack,$Msg_SessionBlankDelete;
      }
    }
  }
  unless ($NoSessions || $SessionsModified) {
    push @WarnStack,$Msg_MeetNoSessions;
  }
}

EndPage();

# Print out diagnostics

ActionReport();
print "<h4>You can make more modifications, modify session agendas, or
       <a href=\"$DisplayMeeting?conferenceid=$ConferenceID\">Display
       the Event</a>. Click a <span class=\"Help\">highlighted</span> link or
       read the <a href=\"$DocDBInstructions?set=event\">instructions</a> for
       help. Required fields are denoted by $RequiredMark.</h4>\n";

FetchConferenceByConferenceID($ConferenceID);

my $TopicLength = 20;
print $query -> start_multipart_form('POST',"$MeetingModify");
print "<div>\n";
print $query -> hidden(-name => 'mode', -default => $SetMode);
if ($SetMode eq "modify") {
  print $query -> hidden(-name => 'conferenceid', -default => $ConferenceID);
}
if ($NoSessions) {
  print $query -> hidden(-name => "nosessions", -default => "true");
  $TopicLength = 10;
}
print "</div>\n";

#FIXME: Make rest of these defaults "my"

my $DefaultEventGroupID       = $Conferences{$ConferenceID}{EventGroupID};
my $DefaultShortDescription   = $Conferences{$ConferenceID}{Title};
my $DefaultLongDescription    = $Conferences{$ConferenceID}{LongDescription};
my $MeetingDefaultLocation    = $Conferences{$ConferenceID}{Location};
my $MeetingDefaultAltLocation = $Conferences{$ConferenceID}{AltLocation};
my $MeetingDefaultURL         = $Conferences{$ConferenceID}{URL};
$MeetingDefaultPreamble       = $Conferences{$ConferenceID}{Preamble};
$MeetingDefaultEpilogue       = $Conferences{$ConferenceID}{Epilogue};
$MeetingDefaultShowAllTalks   = $Conferences{$ConferenceID}{ShowAllTalks};
my $DefaultStartDate          = $Conferences{$ConferenceID}{StartDate};
my $DefaultEndDate            = $Conferences{$ConferenceID}{EndDate};
my @MeetingTopicDefaults      = @{$Conferences{$ConferenceID}{Topics}};
my @MeetingModeratorDefaults  = @{$Conferences{$ConferenceID}{Moderators}};

# Get deaults for meeting view/modify

my @MeetingViewDefaults   = ();
my @MeetingModifyDefaults = ();
my @MeetingViewIDs        = GetMeetingSecurityGroups($ConferenceID);
my @MeetingModifyIDs      = GetMeetingModifyGroups($ConferenceID);

foreach my $MeetingViewID (@MeetingViewIDs) {
  my $GroupID = $MeetingSecurities{$MeetingViewID}{GroupID};
  push @MeetingViewDefaults,$GroupID;
}
foreach my $MeetingModifyID (@MeetingModifyIDs) {
  my $GroupID = $MeetingModify{$MeetingModifyID}{GroupID};
  push @MeetingModifyDefaults,$GroupID;
}

if ($SetMode eq "create") { # Defaults for new meetings, just like for documents
  my @UsersGroups = FindUsersGroups();
  unless ($DefaultPublicAccess) {
    @MeetingViewDefaults = @UsersGroups;
  }
  @MeetingModifyDefaults = @UsersGroups;
}

if ($Mode eq "copy" && $OffsetDays) {
  use DateTime;
  my ($StartYear,$StartMonth,$StartDay) = split /-/,$DefaultStartDate;
  my ($EndYear,$EndMonth,$EndDay)       = split /-/,$DefaultEndDate;

  my $Start = DateTime -> new(year => $StartYear, month => $StartMonth, day => $StartDay);
  my $End   = DateTime -> new(year => $EndYear,   month => $EndMonth,   day => $EndDay);

  $Start -> add(days => $OffsetDays);
  $End   -> add(days => $OffsetDays);

  $DefaultStartDate = $Start -> ymd();
  $DefaultEndDate   = $End   -> ymd();
}

print "<table class=\"MedPaddedTable CenteredTable\">\n";

print "<tr>\n";
print "<td>\n";
print "<div>\n";
EventGroupSelect( {-required => $RequiredEntries{EventGroup},
                   -default  => [$DefaultEventGroupID],
                   -helptext => "Event Group", });
print "</div>\n";
unless ($NoSessions) { # No moderators for external conferences
  print "<div>\n";
  # AuthorScroll(-multiple => $TRUE,        -default  => \@MeetingModeratorDefaults,
  #              -name     => "moderators", -helptext => "Moderators",
  #              -helplink => "moderators",);
  AuthorTextBox(-multiple => $TRUE,        -default  => \@MeetingModeratorDefaults,
      -name     => "moderators", -helptext => "Moderators",
      -helplink => "moderators" );

  print "</div>\n";
}
print "</td>\n";
print "<td>\n";
print "<div>\n";
DateTimePulldown(-name => "start",         -required => $RequiredEntries{StartDate},
                 -helplink => "startdate", -helptext => "Start Date",
                 -dateonly => $TRUE,       -default  => $DefaultStartDate);
print "</div><div>\n";
DateTimePulldown(-name => "end",         -required => $RequiredEntries{EndDate},
                 -helplink => "enddate", -helptext => "End Date",
                 -dateonly => $TRUE,     -default  => $DefaultEndDate);
print "</div>\n";
ShortDescriptionBox(-name      => "shortdesc", -helptext => "Short Description", -required => $RequiredEntries{ShortDescription},
                    -maxlength => 128, -default => $DefaultShortDescription);
LongDescriptionBox(-required  => $RequiredEntries{LongDescription},
                   -maxlength => 400, -default => $DefaultLongDescription);
LocationBox(-default  => $MeetingDefaultLocation);
TextField(-default  => $MeetingDefaultAltLocation, -name     => "altlocation",
          -helplink => "location",                 -helptext => "Alt. Location",);
EventURLBox(-default  => $MeetingDefaultURL);
unless ($NoSessions) {
  print "<div>\n";
  ConferenceShowAllTalks();
  print "</div>\n";
}
print "</td>\n";

print "<td>\n";
TopicScroll({ -multiple => $TRUE,         -default => \@MeetingTopicDefaults,
              -helplink => "eventtopics", -size    => $TopicLength, });
print "</td>\n";

print "</tr>\n";

if ($NoSessions) {
  print "</table>\n";
} else {

  print "<tr>\n";
  print "<td colspan=\"2\">\n"; ConferencePreambleBox(); print "</td>\n";
  print "<td>\n";
  SecurityScroll(-addpublic => 'true',
                 -name      => 'meetingviewgroups',
                 -helplink  => 'meetingviewgroups',
                 -helptext  => 'Viewable by',
                 -hierarchy => $TRUE,
                 -multiple  => $TRUE,
                 -default   => \@MeetingViewDefaults,
                 -size      => 8);
  print "</td>\n";
  print "<td>\n";
  SecurityScroll(-addpublic => 'false',
                 -name      => 'meetingviewgroups',
                 -helplink  => 'meetingviewgroups',
               -hierarchy => $FALSE,
               -helptext  => "Viewable by",
               -multiple  => $TRUE,
               -default   => \@MeetingViewDefaults,
               -size      => 8);
  print "</td>\n";
  print "</tr><tr>\n";
  print "<td colspan=\"2\">\n"; ConferenceEpilogueBox(); print "</td>\n";
  print "<td>\n";
  SecurityScroll(-name     => 'meetingmodifygroups',
                 -helplink => 'meetingmodifygroups',
                 -helptext => 'Modifiable by',
                 -multiple => $TRUE,
                 -hierarchy => $TRUE,
                 -default  => \@MeetingModifyDefaults,
                 -size     => 8);
  print "</td>\n";
  print "<td>\n";
  SecurityScroll(-addpublic => 'false',
               -name      => 'meetingmodifygroups',
               -helplink  => 'meetingmodifygroups',
               -helptext  => "Modifiable by",
               -hierarchy => $FALSE,
               -multiple  => $TRUE,
               -default   => \@MeetingModifyDefaults,
               -size      => 8);
  print "</td>\n";
  print "</tr>\n";
  print "</table>\n";

  %Conferences       = ();
  %Sessions          = ();
  %SessionSeparators = ();
  %MeetingOrderIDs   = ();

  my $ConferenceID        = FetchConferenceByConferenceID($ConferenceID);
  my @SessionIDs          = FetchSessionsByConferenceID($ConferenceID);
  my @SessionSeparatorIDs = FetchSessionSeparatorsByConferenceID($ConferenceID);
  my @MeetingOrderIDs     = FetchMeetingOrdersByConferenceID($ConferenceID);

  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs;

  SessionEntryForm(-conferenceid => $ConferenceID, -meetingorderids => \@MeetingOrderIDs, -offsetdays => $OffsetDays);
}

print "<p class=\"SubmitCell\">\n";
my $SubmitTitle = "Modify Event and Sessions";
if ($NoSessions) {
  $SubmitTitle = "Modify Event";
}
print $query -> submit (-value => $SubmitTitle);
print "</p>\n";

print $query -> end_multipart_form;

my ($NavBarText,$NavBarURL);
if ($ConferenceID) { # Only put modify link in if meeting already exists
  $NavBarText = "Display&nbsp;Meeting";
  $NavBarURL  = "$DisplayMeeting?conferenceid=$ConferenceID";
}

DocDBNavBar($NavBarText,$NavBarURL);
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
