#! /usr/bin/env perl
#
#        Name: DisplayMeeting
# Description: Displays talks for a meeting or just a session of a meeting
# 
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2007 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "Messages.pm";

require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";
require "MeetingSecurityUtilities.pm";

require "MeetingHTML.pm";
require "DocumentHTML.pm";
require "MeetingSQL.pm";
require "RevisionSQL.pm";
require "TalkSQL.pm";

require "TalkHintUtilities.pm";
require "DocumentUtilities.pm";
require "EventUtilities.pm";
require "Utilities.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $SessionID          = $params{sessionid};
my $SessionSeparatorID = $params{sessionseparatorid};
my $EventID            = $params{conferenceid};

@ErrorStack = ();
@WarnStack  = ();

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}         

my $PageTitle = "Unknown Event";
if (!$dbh) {
  $PageTitle = "Database Error";
} elsif ($SessionID ) {
  FetchSessionByID($SessionID);
  $PageTitle = $Sessions{$SessionID}{Title};
} elsif ($SessionSeparatorID) {
  FetchSessionSeparatorByID($SessionSeparatorID);
  $PageTitle = $SessionSeparators{$SessionSeparatorID}{Title};
} else {  
  FetchConferenceByConferenceID($EventID);
  $PageTitle = $Conferences{$EventID}{Title};
}  

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader($PageTitle,"", -scripts => ["serverstatus", "PopUps", "prototype", "prototype_sorttable"]);
EndPage(@ErrorStack);

my $DisplayMode = ""; # 4 choices: Event, SingleSession(Event), Session, Separator


if ($EventID) {
  $DisplayMode = "Event";
  my @MeetingOrderIDs = FetchMeetingOrdersByConferenceID($EventID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
  if (scalar(@MeetingOrderIDs) == 1) { # If just one session, switch to SingleSession mode
    $DisplayMode    = "SingleSession";
    $MeetingOrderID = pop @MeetingOrderIDs;
    $SessionID      = $MeetingOrders{$MeetingOrderID}{SessionID};
  }
} elsif ($SessionID) {
  $DisplayMode = "Session";
  FetchSessionByID($SessionID);
  $EventID = $Sessions{$SessionID}{ConferenceID};
  my @MeetingOrderIDs = FetchMeetingOrdersByConferenceID($EventID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
  if ($#MeetingOrderIDs == 0) { # If just one session, switch to SingleSession mode
    $DisplayMode = "SingleSession";
  }
} elsif ($SessionSeparatorID) {
  $DisplayMode = "Separator";
  FetchSessionSeparatorByID($SessionSeparatorID);
  $EventID = $SessionSeparators{$SessionSeparatorID}{ConferenceID};
}

FetchConferenceByConferenceID($EventID);
unless ($Conferences{$EventID}{TimeStamp}) {
  push @ErrorStack,"No such event exists.";
}  
unless (CanAccessMeeting($EventID)) {
  push @ErrorStack,$Msg_MeetNoAccess;
}
EndPage(@ErrorStack);

# Rehint talks 

if ($DisplayMode eq "Session" || $DisplayMode eq "SingleSession") { 
  ReHintTalksBySessionID($SessionID); 
  FetchSessionByID($SessionID);
} elsif ($DisplayMode eq $Event) {
  my @SessionIDs = FetchSessionsByConferenceID($EventID);
  foreach my $SessionID (@SessionIDs) {
    ReHintTalksBySessionID($SessionID); 
  }
}
ClearSessionTalks();

### Get list of docs that are not on agenda

my @AgendaDocIDs   = EventAgendaDocIDs({-eventid => $EventID});
my @AllRevisionIDs = FetchRevisionsByEventID($EventID);
my @AllDocIDs      = RevisionToDocumentIDs({-revisionids => \@AllRevisionIDs});
my @UnusedDocIDs   = RemoveArray(\@AllDocIDs,@AgendaDocIDs);

print "<div id=\"EventInfo\">\n";
  
### Header info
  
#print "<div id=\"Header3Col\">\n";
#print "</div>\n";  # Header3Col

### Left Column

if (!$Public) {
   print "<div id=\"LeftColumn3Col\">\n";
   PrintEventLeftSidebar({ -sessionid   => $SessionID,          -eventid => $EventID, 
                           -separatorid => $SessionSeparatorID, -displaymode => $DisplayMode,
                           -nextradocs  => scalar(@UnusedDocIDs), 
                        });
   print "</div>\n";  # LeftColumn3Col
}

### Main Column

print "<div id=\"MainColumn3Col\">\n";

### Right column (wrapped around by middle column)

print "<div id=\"RightColumn3Col\">\n";
PrintEventRightSidebar( {-sessionid => $SessionID, -eventid => $EventID, -separatorid => $SessionSeparatorID, -displaymode => $DisplayMode} );
print "</div>\n";  # RightColumn3Col

### Main column content starts here

print EventHeader( {-sessionid => $SessionID, -eventid => $EventID, -separatorid => $SessionSeparatorID, -displaymode => $DisplayMode} );
print "</div>\n";  # MainColumn3Col

### Footer
  
print "<div id=\"Footer3Col\">\n"; # Must have to keep NavBar on true bottom

if ($DisplayMode eq "Session" || $DisplayMode eq "SingleSession") { # Display a single session
  PrintSession(-sessionid => $SessionID, -skipheader => $TRUE); 
} elsif ($DisplayMode eq "Event") { # Display meeting info or meeting with all talks
  my @MeetingOrderIDs = FetchMeetingOrdersByConferenceID($EventID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 

# FIXME: Awl -> All to restore previous behavior, remove Conferences test from ~20 lines below
# Check separator before deciding
  if ($Conferences{$EventID}{ShowAwlTalks}) { # Display all talks, sessions
    foreach $MeetingOrderID (@MeetingOrderIDs) { # Loop over sessions/breaks
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {
        FetchSessionByID($SessionID);
        PrintSession(-sessionid => $SessionID); # Display a single session
      } elsif ($SessionSeparatorID) {
        FetchSessionSeparatorByID($SessionSeparatorID);
        PrintSessionSeparator($SessionSeparatorID); # Display session separator
      }
    }   
  } else { # Display links to sessions and info on separators
    my $SummaryTableHeader  = '<table class="MedPaddedTable CenteredTable Alternating" id="SessionList">';
       $SummaryTableHeader .= "<tr><th>Date &amp; Time</th><th>Session</th><th>Session Information</th>\n";
       $SummaryTableHeader .= "<th>Location</th><th>Topic(s)</th><th>Moderator(s)</th></tr>\n";

    print $SummaryTableHeader;
    my $Row = 0;
    foreach $MeetingOrderID (@MeetingOrderIDs) {
      ++$Row; 
      my $RowClass = ("","alt")[$Row % 2];
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {              # Session info and link to session
        if ($Sessions{$SessionID}{ShowAllTalks} || $Conferences{$EventID}{ShowAllTalks}) {
          FetchSessionByID($SessionID);
          print SessionInfo($SessionID, {-rowclass => "alt"} ); # Does own <tr>
          print "<tr class=\"\">".'<td class="EmbedSession" colspan="6">';
          PrintSession(-sessionid => $SessionID, -onlytalks => $TRUE); # Display a single session
          print '</td></tr>';
        } else {  
          print SessionInfo($SessionID, {-rowclass => $RowClass} ); # Does own <tr>
        }
      } elsif ($SessionSeparatorID) {
        print "<tr class=\"$RowClass\">\n"; 
        PrintSessionSeparatorInfo($SessionSeparatorID); # SessionSeparator info 
        print "</tr>\n";
      }
    }  
    print "</table><hr/>\n";
  }
  
# Finish off meeting display  
  
  PrintMeetingEpilogue($EventID);
}

# Display talks not associated with sessions  

if ($DisplayMode eq "Event" || $DisplayMode eq "SingleSession") {  
  if (@UnusedDocIDs) {
    print "<h4>Other documents for this event</h4>\n";
    my %FieldList = PrepareFieldList(-default => "Default");
    my ($NumberOfDocuments, $AllN) = DocumentTable(-fieldlist => \%FieldList,
         -docids  => \@UnusedDocIDs, -sortby  => "date",  
         -reverse => $TRUE);
    print "<hr/>\n";
  }
}

print "</div>\n";  # Footer3Col
print "</div>\n"; # EventInfo

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
